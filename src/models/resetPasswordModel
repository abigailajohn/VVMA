const db = require('../db/mysqldb');
const { generateOTP, storeOTP, verifyOTP_v2 } = require('../utils/otp');
const { sendOTPEmail } = require('../utils/email');

const rateLimitCache = new Map();

const resetPasswordV1 = async (email, otp, newPassword) => {
  const query = "SELECT * FROM users WHERE email = ?";
  const [user] = await db.execute(query, [email]);
  if (user.length === 0) {
    return { status: 404, message: "User not found" };
  }

  const isOTPValid = verifyOTP_v1(email, otp);
  if (!isOTPValid) {
    return { status: 400, message: "Invalid or expired OTP" };
  }

  await db.execute("UPDATE users SET password = ? WHERE email = ?", [newPassword, email]);
  return { status: 200, message: "Password has been reset" };
};

const requestPasswordResetV2 = async (email) => {
  const query = "SELECT * FROM users WHERE email = ?";
  const [user] = await db.execute(query, [email]);
  if (user.length === 0) {
    return { status: 200, message: "If your email is registered, you will receive a password reset OTP" };
  }
  const otp = generateOTP();
  storeOTP(email, otp);
  await sendOTPEmail(email, otp);
  return { status: 200, message: "Password reset OTP has been sent to your email" };
};

const resetPasswordV2 = async (email, otp, newPassword) => {
  const query = "SELECT * FROM users WHERE email = ?";
  const [user] = await db.execute(query, [email]);
  if (user.length === 0) {
    return { status: 404, message: "User not found" };
  }

  const cacheKey = `otp_attempts_${email}`;
  const now = Date.now();
  const attempts = rateLimitCache.get(cacheKey) || { count: 0, firstAttemptTime: now };

  if (attempts.count >= 5 && now - attempts.firstAttemptTime < 10 * 60 * 1000) {
    return { status: 429, message: "Too many failed OTP attempts. Please try again after 10 minutes." };
  }
  if (now - attempts.firstAttemptTime > 10 * 60 * 1000) {
    rateLimitCache.delete(cacheKey);
  }

  const verificationResult = verifyOTP_v2(email, otp);
  if (!verificationResult.success) {
    attempts.count++;
    if (attempts.count === 1) {
      attempts.firstAttemptTime = now;
    }
    rateLimitCache.set(cacheKey, attempts);
    return { status: 400, message: verificationResult.message };
  }

  await db.execute("UPDATE users SET password = ? WHERE email = ?", [newPassword, email]);
  rateLimitCache.delete(cacheKey);
  return { status: 200, message: "Password has been reset" };
};

module.exports = {
  resetPasswordV1,
  requestPasswordResetV2,
  resetPasswordV2,
};